
package local.charles.module.ws;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "Manager", targetNamespace = "urn:Manager")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Manager {


    /**
     * 
     * @param username
     * @param password
     * @return
     *     returns java.lang.String
     * @throws ManagerCommunicationException_Exception
     * @throws ManagerException_Exception
     * @throws ManagerMaxSessionsException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerSecurityException_Exception
     * @throws ManagerLockoutException_Exception
     */
    @WebMethod
    @WebResult(name = "authenticateReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "authenticate", targetNamespace = "urn:Manager", className = "local.charles.module.ws.Authenticate")
    @ResponseWrapper(localName = "authenticateResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AuthenticateResponse")
    public String authenticate(
        @WebParam(name = "username", targetNamespace = "urn:Manager")
        String username,
        @WebParam(name = "password", targetNamespace = "urn:Manager")
        String password)
        throws ManagerAuthenticationException_Exception, ManagerCommunicationException_Exception, ManagerException_Exception, ManagerLockoutException_Exception, ManagerMaxSessionsException_Exception, ManagerSecurityException_Exception
    ;

    /**
     * 
     * @param username
     * @param password
     * @param tenantName
     * @return
     *     returns java.lang.String
     * @throws ManagerCommunicationException_Exception
     * @throws ManagerException_Exception
     * @throws ManagerMaxSessionsException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerSecurityException_Exception
     * @throws ManagerLockoutException_Exception
     */
    @WebMethod
    @WebResult(name = "authenticateTenantReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "authenticateTenant", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AuthenticateTenant")
    @ResponseWrapper(localName = "authenticateTenantResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AuthenticateTenantResponse")
    public String authenticateTenant(
        @WebParam(name = "tenantName", targetNamespace = "urn:Manager")
        String tenantName,
        @WebParam(name = "username", targetNamespace = "urn:Manager")
        String username,
        @WebParam(name = "password", targetNamespace = "urn:Manager")
        String password)
        throws ManagerAuthenticationException_Exception, ManagerCommunicationException_Exception, ManagerException_Exception, ManagerLockoutException_Exception, ManagerMaxSessionsException_Exception, ManagerSecurityException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostRecommendationScan", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationScan")
    @ResponseWrapper(localName = "hostRecommendationScanResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationScanResponse")
    public void hostRecommendationScan(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "userDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserDelete")
    @ResponseWrapper(localName = "userDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserDeleteResponse")
    public void userDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param ipl
     * @return
     *     returns local.charles.module.ws.UserTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "userSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "userSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserSave")
    @ResponseWrapper(localName = "userSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserSaveResponse")
    public UserTransport userSave(
        @WebParam(name = "ipl", targetNamespace = "urn:Manager")
        UserTransport ipl,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.UserTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "userRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "userRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieve")
    @ResponseWrapper(localName = "userRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieveResponse")
    public UserTransport userRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.UserTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "userRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "userRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieveByName")
    @ResponseWrapper(localName = "userRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieveByNameResponse")
    public UserTransport userRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.UserTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "userRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "userRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieveAll")
    @ResponseWrapper(localName = "userRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UserRetrieveAllResponse")
    public List<UserTransport> userRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns int
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "roleGetDefaultIDReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "roleGetDefaultID", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RoleGetDefaultID")
    @ResponseWrapper(localName = "roleGetDefaultIDResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RoleGetDefaultIDResponse")
    public int roleGetDefaultID(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param input
     * @param pluginID
     * @param sID
     * @return
     *     returns java.lang.String
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "pluginRequestReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "pluginRequest", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PluginRequest")
    @ResponseWrapper(localName = "pluginRequestResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PluginRequestResponse")
    public String pluginRequest(
        @WebParam(name = "pluginID", targetNamespace = "urn:Manager")
        String pluginID,
        @WebParam(name = "input", targetNamespace = "urn:Manager")
        String input,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param tagFilter
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param counterFilter
     * @return
     *     returns java.util.List<local.charles.module.ws.CounterTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "counterRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "counterRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterRetrieve")
    @ResponseWrapper(localName = "counterRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterRetrieveResponse")
    public List<CounterTransport> counterRetrieve(
        @WebParam(name = "counterFilter", targetNamespace = "urn:Manager")
        EnumCounterFilter counterFilter,
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "tagFilter", targetNamespace = "urn:Manager")
        TagFilterTransport tagFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param tagFilter
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param counterFilter
     * @return
     *     returns java.util.List<local.charles.module.ws.CounterHostTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "counterHostRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "counterHostRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterHostRetrieve")
    @ResponseWrapper(localName = "counterHostRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterHostRetrieveResponse")
    public List<CounterHostTransport> counterHostRetrieve(
        @WebParam(name = "counterFilter", targetNamespace = "urn:Manager")
        EnumCounterFilter counterFilter,
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "tagFilter", targetNamespace = "urn:Manager")
        TagFilterTransport tagFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param tagFilter
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param counterFilter
     * @return
     *     returns java.util.List<local.charles.module.ws.CounterWithIDTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "counterWithIDRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "counterWithIDRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterWithIDRetrieve")
    @ResponseWrapper(localName = "counterWithIDRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterWithIDRetrieveResponse")
    public List<CounterWithIDTransport> counterWithIDRetrieve(
        @WebParam(name = "counterFilter", targetNamespace = "urn:Manager")
        EnumCounterFilter counterFilter,
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "tagFilter", targetNamespace = "urn:Manager")
        TagFilterTransport tagFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param tagFilter
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param counterFilter
     * @return
     *     returns java.util.List<local.charles.module.ws.CounterAlertTypeTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "counterAlertTypeRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "counterAlertTypeRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterAlertTypeRetrieve")
    @ResponseWrapper(localName = "counterAlertTypeRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterAlertTypeRetrieveResponse")
    public List<CounterAlertTypeTransport> counterAlertTypeRetrieve(
        @WebParam(name = "counterFilter", targetNamespace = "urn:Manager")
        EnumCounterFilter counterFilter,
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "tagFilter", targetNamespace = "urn:Manager")
        TagFilterTransport tagFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param tagFilter
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param counterFilter
     * @return
     *     returns long
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "counterSumRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "counterSumRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterSumRetrieve")
    @ResponseWrapper(localName = "counterSumRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.CounterSumRetrieveResponse")
    public long counterSumRetrieve(
        @WebParam(name = "counterFilter", targetNamespace = "urn:Manager")
        EnumCounterSumFilter counterFilter,
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "tagFilter", targetNamespace = "urn:Manager")
        TagFilterTransport tagFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param previousTimeFilter
     * @param timeFilter
     * @param sID
     * @return
     *     returns local.charles.module.ws.FeatureSummaryTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "featureSummaryRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "featureSummaryRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FeatureSummaryRetrieve")
    @ResponseWrapper(localName = "featureSummaryRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FeatureSummaryRetrieveResponse")
    public FeatureSummaryTransport featureSummaryRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "previousTimeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport previousTimeFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns local.charles.module.ws.StatusSummaryTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "statusSummaryRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "statusSummaryRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatusSummaryRetrieve")
    @ResponseWrapper(localName = "statusSummaryRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatusSummaryRetrieveResponse")
    public StatusSummaryTransport statusSummaryRetrieve(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ComponentInfoTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "componentSummaryRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "componentSummaryRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ComponentSummaryRetrieve")
    @ResponseWrapper(localName = "componentSummaryRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ComponentSummaryRetrieveResponse")
    public List<ComponentInfoTransport> componentSummaryRetrieve(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostFilter
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostStatusSummaryTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostStatusSummaryRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostStatusSummaryRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostStatusSummaryRetrieve")
    @ResponseWrapper(localName = "hostStatusSummaryRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostStatusSummaryRetrieveResponse")
    public HostStatusSummaryTransport hostStatusSummaryRetrieve(
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sinceManagerTime
     * @param sID
     * @param type
     * @return
     *     returns local.charles.module.ws.JobProgressTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "hostJobProgressReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostJobProgress", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostJobProgress")
    @ResponseWrapper(localName = "hostJobProgressResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostJobProgressResponse")
    public JobProgressTransport hostJobProgress(
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        EnumJobType type,
        @WebParam(name = "sinceManagerTime", targetNamespace = "urn:Manager")
        XMLGregorianCalendar sinceManagerTime,
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param version2
     * @param version1
     * @return
     *     returns local.charles.module.ws.EnumCompareResults
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareVersionStringsCompareReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareVersionStringsCompare", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareVersionStringsCompare")
    @ResponseWrapper(localName = "softwareVersionStringsCompareResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareVersionStringsCompareResponse")
    public EnumCompareResults softwareVersionStringsCompare(
        @WebParam(name = "version1", targetNamespace = "urn:Manager")
        String version1,
        @WebParam(name = "version2", targetNamespace = "urn:Manager")
        String version2,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostAgentActivate", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAgentActivate")
    @ResponseWrapper(localName = "hostAgentActivateResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAgentActivateResponse")
    public void hostAgentActivate(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostAgentDeactivate", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAgentDeactivate")
    @ResponseWrapper(localName = "hostAgentDeactivateResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAgentDeactivateResponse")
    public void hostAgentDeactivate(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostLock", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostLock")
    @ResponseWrapper(localName = "hostLockResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostLockResponse")
    public void hostLock(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostUnlock", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUnlock")
    @ResponseWrapper(localName = "hostUnlockResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUnlockResponse")
    public void hostUnlock(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostClearWarningsErrors", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostClearWarningsErrors")
    @ResponseWrapper(localName = "hostClearWarningsErrorsResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostClearWarningsErrorsResponse")
    public void hostClearWarningsErrors(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param host
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "hostCreateReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostCreate", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostCreate")
    @ResponseWrapper(localName = "hostCreateResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostCreateResponse")
    public HostTransport hostCreate(
        @WebParam(name = "host", targetNamespace = "urn:Manager")
        HostTransport host,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDelete")
    @ResponseWrapper(localName = "hostDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDeleteResponse")
    public void hostDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieve")
    @ResponseWrapper(localName = "hostRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveResponse")
    public HostTransport hostRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostname
     * @return
     *     returns local.charles.module.ws.HostTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveByName")
    @ResponseWrapper(localName = "hostRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveByNameResponse")
    public HostTransport hostRetrieveByName(
        @WebParam(name = "hostname", targetNamespace = "urn:Manager")
        String hostname,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.HostTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveAll")
    @ResponseWrapper(localName = "hostRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveAllResponse")
    public List<HostTransport> hostRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostStatusTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostGetStatusReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostGetStatus", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetStatus")
    @ResponseWrapper(localName = "hostGetStatusResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetStatusResponse")
    public HostStatusTransport hostGetStatus(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param editableSettings
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "systemSettingSet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemSettingSet")
    @ResponseWrapper(localName = "systemSettingSetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemSettingSetResponse")
    public void systemSettingSet(
        @WebParam(name = "editableSettings", targetNamespace = "urn:Manager")
        List<EditableSettingTransport> editableSettings,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param keys
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.EditableSettingStoredTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "systemSettingGetReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "systemSettingGet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemSettingGet")
    @ResponseWrapper(localName = "systemSettingGetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemSettingGetResponse")
    public List<EditableSettingStoredTransport> systemSettingGet(
        @WebParam(name = "keys", targetNamespace = "urn:Manager")
        List<String> keys,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param editableSettings
     * @param sID
     * @param securityProfileID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "securityProfileSettingSet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingSet")
    @ResponseWrapper(localName = "securityProfileSettingSetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingSetResponse")
    public void securityProfileSettingSet(
        @WebParam(name = "securityProfileID", targetNamespace = "urn:Manager")
        int securityProfileID,
        @WebParam(name = "editableSettings", targetNamespace = "urn:Manager")
        List<EditableSettingTransport> editableSettings,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param keys
     * @param sID
     * @param securityProfileID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "securityProfileSettingClear", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingClear")
    @ResponseWrapper(localName = "securityProfileSettingClearResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingClearResponse")
    public void securityProfileSettingClear(
        @WebParam(name = "securityProfileID", targetNamespace = "urn:Manager")
        int securityProfileID,
        @WebParam(name = "keys", targetNamespace = "urn:Manager")
        List<String> keys,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param keys
     * @param sID
     * @param securityProfileID
     * @return
     *     returns java.util.List<local.charles.module.ws.EditableSettingStoredTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileSettingGetReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileSettingGet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingGet")
    @ResponseWrapper(localName = "securityProfileSettingGetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSettingGetResponse")
    public List<EditableSettingStoredTransport> securityProfileSettingGet(
        @WebParam(name = "securityProfileID", targetNamespace = "urn:Manager")
        int securityProfileID,
        @WebParam(name = "keys", targetNamespace = "urn:Manager")
        List<String> keys,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     */
    @WebMethod
    @RequestWrapper(localName = "endSession", targetNamespace = "urn:Manager", className = "local.charles.module.ws.EndSession")
    @ResponseWrapper(localName = "endSessionResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.EndSessionResponse")
    public void endSession(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID);

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "portListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListDelete")
    @ResponseWrapper(localName = "portListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListDeleteResponse")
    public void portListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param pl
     * @param sID
     * @return
     *     returns local.charles.module.ws.PortListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "portListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "portListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListSave")
    @ResponseWrapper(localName = "portListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListSaveResponse")
    public PortListTransport portListSave(
        @WebParam(name = "pl", targetNamespace = "urn:Manager")
        PortListTransport pl,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.PortListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "portListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "portListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieve")
    @ResponseWrapper(localName = "portListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieveResponse")
    public PortListTransport portListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.PortListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "portListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "portListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieveByName")
    @ResponseWrapper(localName = "portListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieveByNameResponse")
    public PortListTransport portListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.PortListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "portListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "portListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieveAll")
    @ResponseWrapper(localName = "portListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.PortListRetrieveAllResponse")
    public List<PortListTransport> portListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "MACListDelete")
    @RequestWrapper(localName = "MACListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListDelete")
    @ResponseWrapper(localName = "MACListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListDeleteResponse")
    public void macListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param ml
     * @return
     *     returns local.charles.module.ws.MACListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "MACListSave")
    @WebResult(name = "MACListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "MACListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListSave")
    @ResponseWrapper(localName = "MACListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListSaveResponse")
    public MACListTransport macListSave(
        @WebParam(name = "ml", targetNamespace = "urn:Manager")
        MACListTransport ml,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.MACListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "MACListRetrieve")
    @WebResult(name = "MACListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "MACListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieve")
    @ResponseWrapper(localName = "MACListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieveResponse")
    public MACListTransport macListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.MACListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "MACListRetrieveByName")
    @WebResult(name = "MACListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "MACListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieveByName")
    @ResponseWrapper(localName = "MACListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieveByNameResponse")
    public MACListTransport macListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.MACListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "MACListRetrieveAll")
    @WebResult(name = "MACListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "MACListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieveAll")
    @ResponseWrapper(localName = "MACListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.MACListRetrieveAllResponse")
    public List<MACListTransport> macListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "IPListDelete")
    @RequestWrapper(localName = "IPListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListDelete")
    @ResponseWrapper(localName = "IPListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListDeleteResponse")
    public void ipListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param ipl
     * @return
     *     returns local.charles.module.ws.IPListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "IPListSave")
    @WebResult(name = "IPListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "IPListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListSave")
    @ResponseWrapper(localName = "IPListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListSaveResponse")
    public IPListTransport ipListSave(
        @WebParam(name = "ipl", targetNamespace = "urn:Manager")
        IPListTransport ipl,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.IPListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "IPListRetrieve")
    @WebResult(name = "IPListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "IPListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieve")
    @ResponseWrapper(localName = "IPListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieveResponse")
    public IPListTransport ipListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.IPListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "IPListRetrieveByName")
    @WebResult(name = "IPListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "IPListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieveByName")
    @ResponseWrapper(localName = "IPListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieveByNameResponse")
    public IPListTransport ipListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.IPListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "IPListRetrieveAll")
    @WebResult(name = "IPListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "IPListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieveAll")
    @ResponseWrapper(localName = "IPListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IPListRetrieveAllResponse")
    public List<IPListTransport> ipListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "applicationTypeDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeDelete")
    @ResponseWrapper(localName = "applicationTypeDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeDeleteResponse")
    public void applicationTypeDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param at
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplicationTypeTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeSave")
    @ResponseWrapper(localName = "applicationTypeSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeSaveResponse")
    public ApplicationTypeTransport applicationTypeSave(
        @WebParam(name = "at", targetNamespace = "urn:Manager")
        ApplicationTypeTransport at,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplicationTypeTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieve")
    @ResponseWrapper(localName = "applicationTypeRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieveResponse")
    public ApplicationTypeTransport applicationTypeRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplicationTypeTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieveByName")
    @ResponseWrapper(localName = "applicationTypeRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieveByNameResponse")
    public ApplicationTypeTransport applicationTypeRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ApplicationTypeTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieveAll")
    @ResponseWrapper(localName = "applicationTypeRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeRetrieveAllResponse")
    public List<ApplicationTypeTransport> applicationTypeRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "firewallRuleDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleDelete")
    @ResponseWrapper(localName = "firewallRuleDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleDeleteResponse")
    public void firewallRuleDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param fr
     * @return
     *     returns local.charles.module.ws.FirewallRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "firewallRuleSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "firewallRuleSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleSave")
    @ResponseWrapper(localName = "firewallRuleSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleSaveResponse")
    public FirewallRuleTransport firewallRuleSave(
        @WebParam(name = "fr", targetNamespace = "urn:Manager")
        FirewallRuleTransport fr,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.FirewallRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "firewallRuleRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "firewallRuleRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieve")
    @ResponseWrapper(localName = "firewallRuleRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieveResponse")
    public FirewallRuleTransport firewallRuleRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.FirewallRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "firewallRuleRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "firewallRuleRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieveByName")
    @ResponseWrapper(localName = "firewallRuleRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieveByNameResponse")
    public FirewallRuleTransport firewallRuleRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.FirewallRuleTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "firewallRuleRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "firewallRuleRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieveAll")
    @ResponseWrapper(localName = "firewallRuleRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallRuleRetrieveAllResponse")
    public List<FirewallRuleTransport> firewallRuleRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "DPIRuleDelete")
    @RequestWrapper(localName = "DPIRuleDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleDelete")
    @ResponseWrapper(localName = "DPIRuleDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleDeleteResponse")
    public void dpiRuleDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ipsf
     * @param sID
     * @return
     *     returns local.charles.module.ws.DPIRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod(operationName = "DPIRuleSave")
    @WebResult(name = "DPIRuleSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "DPIRuleSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleSave")
    @ResponseWrapper(localName = "DPIRuleSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleSaveResponse")
    public DPIRuleTransport dpiRuleSave(
        @WebParam(name = "ipsf", targetNamespace = "urn:Manager")
        DPIRuleTransport ipsf,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.DPIRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "DPIRuleRetrieve")
    @WebResult(name = "DPIRuleRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "DPIRuleRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieve")
    @ResponseWrapper(localName = "DPIRuleRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieveResponse")
    public DPIRuleTransport dpiRuleRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.DPIRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "DPIRuleRetrieveByName")
    @WebResult(name = "DPIRuleRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "DPIRuleRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieveByName")
    @ResponseWrapper(localName = "DPIRuleRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieveByNameResponse")
    public DPIRuleTransport dpiRuleRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.DPIRuleTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "DPIRuleRetrieveAll")
    @WebResult(name = "DPIRuleRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "DPIRuleRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieveAll")
    @ResponseWrapper(localName = "DPIRuleRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIRuleRetrieveAllResponse")
    public List<DPIRuleTransport> dpiRuleRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "scheduleDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleDelete")
    @ResponseWrapper(localName = "scheduleDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleDeleteResponse")
    public void scheduleDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param s
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScheduleTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "scheduleSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scheduleSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleSave")
    @ResponseWrapper(localName = "scheduleSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleSaveResponse")
    public ScheduleTransport scheduleSave(
        @WebParam(name = "s", targetNamespace = "urn:Manager")
        ScheduleTransport s,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScheduleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scheduleRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scheduleRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieve")
    @ResponseWrapper(localName = "scheduleRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieveResponse")
    public ScheduleTransport scheduleRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScheduleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scheduleRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scheduleRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieveByName")
    @ResponseWrapper(localName = "scheduleRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieveByNameResponse")
    public ScheduleTransport scheduleRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ScheduleTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scheduleRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scheduleRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieveAll")
    @ResponseWrapper(localName = "scheduleRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScheduleRetrieveAllResponse")
    public List<ScheduleTransport> scheduleRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "statefulConfigurationDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationDelete")
    @ResponseWrapper(localName = "statefulConfigurationDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationDeleteResponse")
    public void statefulConfigurationDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param s
     * @param sID
     * @return
     *     returns local.charles.module.ws.StatefulConfigurationTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "statefulConfigurationSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "statefulConfigurationSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationSave")
    @ResponseWrapper(localName = "statefulConfigurationSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationSaveResponse")
    public StatefulConfigurationTransport statefulConfigurationSave(
        @WebParam(name = "s", targetNamespace = "urn:Manager")
        StatefulConfigurationTransport s,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.StatefulConfigurationTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "statefulConfigurationRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "statefulConfigurationRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieve")
    @ResponseWrapper(localName = "statefulConfigurationRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieveResponse")
    public StatefulConfigurationTransport statefulConfigurationRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.StatefulConfigurationTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "statefulConfigurationRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "statefulConfigurationRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieveByName")
    @ResponseWrapper(localName = "statefulConfigurationRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieveByNameResponse")
    public StatefulConfigurationTransport statefulConfigurationRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.StatefulConfigurationTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "statefulConfigurationRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "statefulConfigurationRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieveAll")
    @ResponseWrapper(localName = "statefulConfigurationRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.StatefulConfigurationRetrieveAllResponse")
    public List<StatefulConfigurationTransport> statefulConfigurationRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "securityProfileDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileDelete")
    @ResponseWrapper(localName = "securityProfileDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileDeleteResponse")
    public void securityProfileDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sp
     * @param sID
     * @return
     *     returns local.charles.module.ws.SecurityProfileTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSave")
    @ResponseWrapper(localName = "securityProfileSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileSaveResponse")
    public SecurityProfileTransport securityProfileSave(
        @WebParam(name = "sp", targetNamespace = "urn:Manager")
        SecurityProfileTransport sp,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.SecurityProfileTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieve")
    @ResponseWrapper(localName = "securityProfileRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieveResponse")
    public SecurityProfileTransport securityProfileRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.SecurityProfileTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieveByName")
    @ResponseWrapper(localName = "securityProfileRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieveByNameResponse")
    public SecurityProfileTransport securityProfileRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.SecurityProfileTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieveAll")
    @ResponseWrapper(localName = "securityProfileRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRetrieveAllResponse")
    public List<SecurityProfileTransport> securityProfileRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @param securityProfileID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "securityProfileAssignToHost", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileAssignToHost")
    @ResponseWrapper(localName = "securityProfileAssignToHostResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileAssignToHostResponse")
    public void securityProfileAssignToHost(
        @WebParam(name = "securityProfileID", targetNamespace = "urn:Manager")
        int securityProfileID,
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostUpdateNow", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUpdateNow")
    @ResponseWrapper(localName = "hostUpdateNowResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUpdateNowResponse")
    public void hostUpdateNow(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param editableSettings
     * @param sID
     * @param hostID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostSettingSet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingSet")
    @ResponseWrapper(localName = "hostSettingSetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingSetResponse")
    public void hostSettingSet(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "editableSettings", targetNamespace = "urn:Manager")
        List<EditableSettingTransport> editableSettings,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param keys
     * @param sID
     * @param hostID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostSettingClear", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingClear")
    @ResponseWrapper(localName = "hostSettingClearResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingClearResponse")
    public void hostSettingClear(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "keys", targetNamespace = "urn:Manager")
        List<String> keys,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param keys
     * @param sID
     * @param hostID
     * @return
     *     returns java.util.List<local.charles.module.ws.EditableSettingStoredTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostSettingGetReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostSettingGet", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingGet")
    @ResponseWrapper(localName = "hostSettingGetResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSettingGetResponse")
    public List<EditableSettingStoredTransport> hostSettingGet(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "keys", targetNamespace = "urn:Manager")
        List<String> keys,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @return
     *     returns int
     * @throws ManagerException_Exception
     */
    @WebMethod
    @WebResult(name = "getApiVersionReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "getApiVersion", targetNamespace = "urn:Manager", className = "local.charles.module.ws.GetApiVersion")
    @ResponseWrapper(localName = "getApiVersionResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.GetApiVersionResponse")
    public int getApiVersion()
        throws ManagerException_Exception
    ;

    /**
     * 
     * @return
     *     returns javax.xml.datatype.XMLGregorianCalendar
     */
    @WebMethod
    @WebResult(name = "getManagerTimeReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "getManagerTime", targetNamespace = "urn:Manager", className = "local.charles.module.ws.GetManagerTime")
    @ResponseWrapper(localName = "getManagerTimeResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.GetManagerTimeResponse")
    public XMLGregorianCalendar getManagerTime();

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.DPIEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod(operationName = "DPIEventRetrieve")
    @WebResult(name = "DPIEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "DPIEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIEventRetrieve")
    @ResponseWrapper(localName = "DPIEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.DPIEventRetrieveResponse")
    public DPIEventListTransport dpiEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.FirewallEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "firewallEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "firewallEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallEventRetrieve")
    @ResponseWrapper(localName = "firewallEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.FirewallEventRetrieveResponse")
    public FirewallEventListTransport firewallEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param includeNonHostEvents
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.SystemEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "systemEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "systemEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemEventRetrieve")
    @ResponseWrapper(localName = "systemEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemEventRetrieveResponse")
    public SystemEventListTransport systemEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "includeNonHostEvents", targetNamespace = "urn:Manager")
        boolean includeNonHostEvents,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostSecurityProfileClear", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSecurityProfileClear")
    @ResponseWrapper(localName = "hostSecurityProfileClearResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostSecurityProfileClearResponse")
    public void hostSecurityProfileClear(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostGetEventsNow", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetEventsNow")
    @ResponseWrapper(localName = "hostGetEventsNowResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetEventsNowResponse")
    public void hostGetEventsNow(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostGetEventsNowSync", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetEventsNowSync")
    @ResponseWrapper(localName = "hostGetEventsNowSyncResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGetEventsNowSyncResponse")
    public void hostGetEventsNowSync(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param fileName
     * @param sID
     * @param securityUpdate
     * @return
     *     returns local.charles.module.ws.SecurityUpdateTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateStoreReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateStore", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateStore")
    @ResponseWrapper(localName = "securityUpdateStoreResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateStoreResponse")
    public SecurityUpdateTransport securityUpdateStore(
        @WebParam(name = "securityUpdate", targetNamespace = "urn:Manager")
        byte[] securityUpdate,
        @WebParam(name = "fileName", targetNamespace = "urn:Manager")
        String fileName,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.SecurityUpdateTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateRetrieve")
    @ResponseWrapper(localName = "securityUpdateRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateRetrieveResponse")
    public SecurityUpdateTransport securityUpdateRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.SecurityUpdateTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateRetrieveAll")
    @ResponseWrapper(localName = "securityUpdateRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateRetrieveAllResponse")
    public List<SecurityUpdateTransport> securityUpdateRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns byte[]
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateExportReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateExport", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateExport")
    @ResponseWrapper(localName = "securityUpdateExportResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateExportResponse")
    public byte[] securityUpdateExport(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "securityUpdateDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateDelete")
    @ResponseWrapper(localName = "securityUpdateDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateDeleteResponse")
    public void securityUpdateDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplierInformationTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateGetApplierInformationReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateGetApplierInformation", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateGetApplierInformation")
    @ResponseWrapper(localName = "securityUpdateGetApplierInformationResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateGetApplierInformationResponse")
    public ApplierInformationTransport securityUpdateGetApplierInformation(
        @WebParam(name = "ID", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param detectOnly
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplierInformationTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "securityUpdateApplyReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityUpdateApply", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateApply")
    @ResponseWrapper(localName = "securityUpdateApplyResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityUpdateApplyResponse")
    public ApplierInformationTransport securityUpdateApply(
        @WebParam(name = "ID", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "detectOnly", targetNamespace = "urn:Manager")
        boolean detectOnly,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @param moduleNumber
     * @return
     *     returns java.lang.String
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "retrieveActivationCodeReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "retrieveActivationCode", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RetrieveActivationCode")
    @ResponseWrapper(localName = "retrieveActivationCodeResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RetrieveActivationCodeResponse")
    public String retrieveActivationCode(
        @WebParam(name = "moduleNumber", targetNamespace = "urn:Manager")
        int moduleNumber,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param moduleNumber
     * @return
     *     returns java.lang.String
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "retrieveLicenseProfileReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "retrieveLicenseProfile", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RetrieveLicenseProfile")
    @ResponseWrapper(localName = "retrieveLicenseProfileResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.RetrieveLicenseProfileResponse")
    public String retrieveLicenseProfile(
        @WebParam(name = "moduleNumber", targetNamespace = "urn:Manager")
        int moduleNumber,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param activationCode
     * @param sID
     * @param moduleNumber
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addActivationCode", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AddActivationCode")
    @ResponseWrapper(localName = "addActivationCodeResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AddActivationCodeResponse")
    public void addActivationCode(
        @WebParam(name = "moduleNumber", targetNamespace = "urn:Manager")
        int moduleNumber,
        @WebParam(name = "activationCode", targetNamespace = "urn:Manager")
        String activationCode,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param software
     * @param fileName
     * @param sID
     * @param notes
     * @return
     *     returns local.charles.module.ws.SoftwareTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareStoreReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareStore", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareStore")
    @ResponseWrapper(localName = "softwareStoreResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareStoreResponse")
    public SoftwareTransport softwareStore(
        @WebParam(name = "software", targetNamespace = "urn:Manager")
        byte[] software,
        @WebParam(name = "fileName", targetNamespace = "urn:Manager")
        String fileName,
        @WebParam(name = "notes", targetNamespace = "urn:Manager")
        String notes,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.SoftwareTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieve")
    @ResponseWrapper(localName = "softwareRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieveResponse")
    public SoftwareTransport softwareRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.SoftwareTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieveAll")
    @ResponseWrapper(localName = "softwareRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieveAllResponse")
    public List<SoftwareTransport> softwareRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns byte[]
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareExportReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareExport", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareExport")
    @ResponseWrapper(localName = "softwareExportResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareExportResponse")
    public byte[] softwareExport(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "softwareDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareDelete")
    @ResponseWrapper(localName = "softwareDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareDeleteResponse")
    public void softwareDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @param installerVersion
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "softwareApplyToHosts", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareApplyToHosts")
    @ResponseWrapper(localName = "softwareApplyToHostsResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareApplyToHostsResponse")
    public void softwareApplyToHosts(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "installerVersion", targetNamespace = "urn:Manager")
        String installerVersion,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostGroupTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostGroupRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostGroupRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieve")
    @ResponseWrapper(localName = "hostGroupRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieveResponse")
    public HostGroupTransport hostGroupRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.HostGroupTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostGroupRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostGroupRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieveByName")
    @ResponseWrapper(localName = "hostGroupRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieveByNameResponse")
    public HostGroupTransport hostGroupRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.HostGroupTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostGroupRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostGroupRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieveAll")
    @ResponseWrapper(localName = "hostGroupRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupRetrieveAllResponse")
    public List<HostGroupTransport> hostGroupRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostGroupDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupDelete")
    @ResponseWrapper(localName = "hostGroupDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupDeleteResponse")
    public void hostGroupDelete(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostGroup
     * @return
     *     returns local.charles.module.ws.HostGroupTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "hostGroupCreateReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostGroupCreate", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupCreate")
    @ResponseWrapper(localName = "hostGroupCreateResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostGroupCreateResponse")
    public HostGroupTransport hostGroupCreate(
        @WebParam(name = "hostGroup", targetNamespace = "urn:Manager")
        HostGroupTransport hostGroup,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.SystemInformationTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "systemInformationRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "systemInformationRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemInformationRetrieve")
    @ResponseWrapper(localName = "systemInformationRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SystemInformationRetrieveResponse")
    public List<SystemInformationTransport> systemInformationRetrieve(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostID
     * @return
     *     returns java.util.List<local.charles.module.ws.SoftwareTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "softwareRetrieveForHostReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "softwareRetrieveForHost", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieveForHost")
    @ResponseWrapper(localName = "softwareRetrieveForHostResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SoftwareRetrieveForHostResponse")
    public List<SoftwareTransport> softwareRetrieveForHost(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param hostGroupID
     * @return
     *     returns java.util.List<local.charles.module.ws.HostTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRetrieveByHostGroupReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRetrieveByHostGroup", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveByHostGroup")
    @ResponseWrapper(localName = "hostRetrieveByHostGroupResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRetrieveByHostGroupResponse")
    public List<HostTransport> hostRetrieveByHostGroup(
        @WebParam(name = "hostGroupID", targetNamespace = "urn:Manager")
        int hostGroupID,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @param hostGroupID
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostMoveToHostGroup", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostMoveToHostGroup")
    @ResponseWrapper(localName = "hostMoveToHostGroupResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostMoveToHostGroupResponse")
    public void hostMoveToHostGroup(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "hostGroupID", targetNamespace = "urn:Manager")
        int hostGroupID,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "integrityRuleDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleDelete")
    @ResponseWrapper(localName = "integrityRuleDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleDeleteResponse")
    public void integrityRuleDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param irt
     * @param sID
     * @return
     *     returns local.charles.module.ws.IntegrityRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "integrityRuleSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "integrityRuleSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleSave")
    @ResponseWrapper(localName = "integrityRuleSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleSaveResponse")
    public IntegrityRuleTransport integrityRuleSave(
        @WebParam(name = "irt", targetNamespace = "urn:Manager")
        IntegrityRuleTransport irt,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.IntegrityRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "integrityRuleRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "integrityRuleRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieve")
    @ResponseWrapper(localName = "integrityRuleRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieveResponse")
    public IntegrityRuleTransport integrityRuleRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.IntegrityRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "integrityRuleRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "integrityRuleRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieveByName")
    @ResponseWrapper(localName = "integrityRuleRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieveByNameResponse")
    public IntegrityRuleTransport integrityRuleRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.IntegrityRuleTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "integrityRuleRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "integrityRuleRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieveAll")
    @ResponseWrapper(localName = "integrityRuleRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityRuleRetrieveAllResponse")
    public List<IntegrityRuleTransport> integrityRuleRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.IntegrityEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "integrityEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "integrityEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityEventRetrieve")
    @ResponseWrapper(localName = "integrityEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.IntegrityEventRetrieveResponse")
    public IntegrityEventListTransport integrityEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostIntegrityScan", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostIntegrityScan")
    @ResponseWrapper(localName = "hostIntegrityScanResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostIntegrityScanResponse")
    public void hostIntegrityScan(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostRebuildBaseline", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRebuildBaseline")
    @ResponseWrapper(localName = "hostRebuildBaselineResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRebuildBaselineResponse")
    public void hostRebuildBaseline(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "logInspectionRuleDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleDelete")
    @ResponseWrapper(localName = "logInspectionRuleDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleDeleteResponse")
    public void logInspectionRuleDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param irt
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionRuleSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionRuleSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleSave")
    @ResponseWrapper(localName = "logInspectionRuleSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleSaveResponse")
    public LogInspectionRuleTransport logInspectionRuleSave(
        @WebParam(name = "irt", targetNamespace = "urn:Manager")
        LogInspectionRuleTransport irt,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionRuleRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionRuleRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieve")
    @ResponseWrapper(localName = "logInspectionRuleRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieveResponse")
    public LogInspectionRuleTransport logInspectionRuleRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionRuleTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionRuleRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionRuleRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieveByName")
    @ResponseWrapper(localName = "logInspectionRuleRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieveByNameResponse")
    public LogInspectionRuleTransport logInspectionRuleRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.LogInspectionRuleTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionRuleRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionRuleRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieveAll")
    @ResponseWrapper(localName = "logInspectionRuleRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionRuleRetrieveAllResponse")
    public List<LogInspectionRuleTransport> logInspectionRuleRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "logInspectionDecoderDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderDelete")
    @ResponseWrapper(localName = "logInspectionDecoderDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderDeleteResponse")
    public void logInspectionDecoderDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param irt
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionDecoderTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionDecoderSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionDecoderSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderSave")
    @ResponseWrapper(localName = "logInspectionDecoderSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderSaveResponse")
    public LogInspectionDecoderTransport logInspectionDecoderSave(
        @WebParam(name = "irt", targetNamespace = "urn:Manager")
        LogInspectionDecoderTransport irt,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionDecoderTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionDecoderRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionDecoderRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieve")
    @ResponseWrapper(localName = "logInspectionDecoderRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieveResponse")
    public LogInspectionDecoderTransport logInspectionDecoderRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.LogInspectionDecoderTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionDecoderRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionDecoderRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieveByName")
    @ResponseWrapper(localName = "logInspectionDecoderRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieveByNameResponse")
    public LogInspectionDecoderTransport logInspectionDecoderRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.LogInspectionDecoderTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionDecoderRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionDecoderRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieveAll")
    @ResponseWrapper(localName = "logInspectionDecoderRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionDecoderRetrieveAllResponse")
    public List<LogInspectionDecoderTransport> logInspectionDecoderRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.LogInspectionEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "logInspectionEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "logInspectionEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionEventRetrieve")
    @ResponseWrapper(localName = "logInspectionEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.LogInspectionEventRetrieveResponse")
    public LogInspectionEventListTransport logInspectionEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "scanFileListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListDelete")
    @ResponseWrapper(localName = "scanFileListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListDeleteResponse")
    public void scanFileListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param scanFileListTransport
     * @return
     *     returns local.charles.module.ws.ScanFileListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListSave")
    @ResponseWrapper(localName = "scanFileListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListSaveResponse")
    public ScanFileListTransport scanFileListSave(
        @WebParam(name = "scanFileListTransport", targetNamespace = "urn:Manager")
        ScanFileListTransport scanFileListTransport,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanFileListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieve")
    @ResponseWrapper(localName = "scanFileListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieveResponse")
    public ScanFileListTransport scanFileListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanFileListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieveByName")
    @ResponseWrapper(localName = "scanFileListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieveByNameResponse")
    public ScanFileListTransport scanFileListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ScanFileListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieveAll")
    @ResponseWrapper(localName = "scanFileListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileListRetrieveAllResponse")
    public List<ScanFileListTransport> scanFileListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "scanFileExtListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListDelete")
    @ResponseWrapper(localName = "scanFileExtListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListDeleteResponse")
    public void scanFileExtListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param scanFileExtListTransport
     * @return
     *     returns local.charles.module.ws.ScanFileExtListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileExtListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileExtListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListSave")
    @ResponseWrapper(localName = "scanFileExtListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListSaveResponse")
    public ScanFileExtListTransport scanFileExtListSave(
        @WebParam(name = "scanFileExtListTransport", targetNamespace = "urn:Manager")
        ScanFileExtListTransport scanFileExtListTransport,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanFileExtListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileExtListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileExtListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieve")
    @ResponseWrapper(localName = "scanFileExtListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieveResponse")
    public ScanFileExtListTransport scanFileExtListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanFileExtListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileExtListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileExtListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieveByName")
    @ResponseWrapper(localName = "scanFileExtListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieveByNameResponse")
    public ScanFileExtListTransport scanFileExtListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ScanFileExtListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanFileExtListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanFileExtListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieveAll")
    @ResponseWrapper(localName = "scanFileExtListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanFileExtListRetrieveAllResponse")
    public List<ScanFileExtListTransport> scanFileExtListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "scanDirectoryListDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListDelete")
    @ResponseWrapper(localName = "scanDirectoryListDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListDeleteResponse")
    public void scanDirectoryListDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @param scanDirectoryListTransport
     * @return
     *     returns local.charles.module.ws.ScanDirectoryListTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "scanDirectoryListSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanDirectoryListSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListSave")
    @ResponseWrapper(localName = "scanDirectoryListSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListSaveResponse")
    public ScanDirectoryListTransport scanDirectoryListSave(
        @WebParam(name = "scanDirectoryListTransport", targetNamespace = "urn:Manager")
        ScanDirectoryListTransport scanDirectoryListTransport,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanDirectoryListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanDirectoryListRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanDirectoryListRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieve")
    @ResponseWrapper(localName = "scanDirectoryListRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieveResponse")
    public ScanDirectoryListTransport scanDirectoryListRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.ScanDirectoryListTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanDirectoryListRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanDirectoryListRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieveByName")
    @ResponseWrapper(localName = "scanDirectoryListRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieveByNameResponse")
    public ScanDirectoryListTransport scanDirectoryListRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ScanDirectoryListTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "scanDirectoryListRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "scanDirectoryListRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieveAll")
    @ResponseWrapper(localName = "scanDirectoryListRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ScanDirectoryListRetrieveAllResponse")
    public List<ScanDirectoryListTransport> scanDirectoryListRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "antiMalwareDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareDelete")
    @ResponseWrapper(localName = "antiMalwareDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareDeleteResponse")
    public void antiMalwareDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param antiMalwareTransport
     * @param sID
     * @return
     *     returns local.charles.module.ws.AntiMalwareTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "antiMalwareSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "antiMalwareSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareSave")
    @ResponseWrapper(localName = "antiMalwareSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareSaveResponse")
    public AntiMalwareTransport antiMalwareSave(
        @WebParam(name = "antiMalwareTransport", targetNamespace = "urn:Manager")
        AntiMalwareTransport antiMalwareTransport,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.AntiMalwareTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "antiMalwareRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "antiMalwareRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieve")
    @ResponseWrapper(localName = "antiMalwareRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieveResponse")
    public AntiMalwareTransport antiMalwareRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param name
     * @param sID
     * @return
     *     returns local.charles.module.ws.AntiMalwareTransport
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "antiMalwareRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "antiMalwareRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieveByName")
    @ResponseWrapper(localName = "antiMalwareRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieveByNameResponse")
    public AntiMalwareTransport antiMalwareRetrieveByName(
        @WebParam(name = "name", targetNamespace = "urn:Manager")
        String name,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.AntiMalwareTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "antiMalwareRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "antiMalwareRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieveAll")
    @ResponseWrapper(localName = "antiMalwareRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareRetrieveAllResponse")
    public List<AntiMalwareTransport> antiMalwareRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.AntiMalwareEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "antiMalwareEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "antiMalwareEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareEventRetrieve")
    @ResponseWrapper(localName = "antiMalwareEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AntiMalwareEventRetrieveResponse")
    public AntiMalwareEventListTransport antiMalwareEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @param applyDSRU
     * @param type
     * @return
     *     returns boolean
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "updateComponentFromAUReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "updateComponentFromAU", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UpdateComponentFromAU")
    @ResponseWrapper(localName = "updateComponentFromAUResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UpdateComponentFromAUResponse")
    public boolean updateComponentFromAU(
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "applyDSRU", targetNamespace = "urn:Manager")
        boolean applyDSRU,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns boolean
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "updateComponentsReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "updateComponents", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UpdateComponents")
    @ResponseWrapper(localName = "updateComponentsResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.UpdateComponentsResponse")
    public boolean updateComponents(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostAntiMalwareScan", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAntiMalwareScan")
    @ResponseWrapper(localName = "hostAntiMalwareScanResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostAntiMalwareScanResponse")
    public void hostAntiMalwareScan(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param hostIDs
     * @param sID
     * @param type
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostUpdateComponent", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUpdateComponent")
    @ResponseWrapper(localName = "hostUpdateComponentResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostUpdateComponentResponse")
    public void hostUpdateComponent(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param id
     * @param hostIDs
     * @param sID
     * @param type
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostRollbackComponent", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRollbackComponent")
    @ResponseWrapper(localName = "hostRollbackComponentResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRollbackComponentResponse")
    public void hostRollbackComponent(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param count
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.AlertStatusTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "alertStatusRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "alertStatusRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AlertStatusRetrieve")
    @ResponseWrapper(localName = "alertStatusRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.AlertStatusRetrieveResponse")
    public List<AlertStatusTransport> alertStatusRetrieve(
        @WebParam(name = "count", targetNamespace = "urn:Manager")
        int count,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostDetailLevel
     * @param hostFilter
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.HostDetailTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostDetailRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostDetailRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieve")
    @ResponseWrapper(localName = "hostDetailRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveResponse")
    public List<HostDetailTransport> hostDetailRetrieve(
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "hostDetailLevel", targetNamespace = "urn:Manager")
        EnumHostDetailLevel hostDetailLevel,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostDetailLevel
     * @param sID
     * @param hostname
     * @return
     *     returns java.util.List<local.charles.module.ws.HostDetailTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostDetailRetrieveByNameReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostDetailRetrieveByName", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByName")
    @ResponseWrapper(localName = "hostDetailRetrieveByNameResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByNameResponse")
    public List<HostDetailTransport> hostDetailRetrieveByName(
        @WebParam(name = "hostname", targetNamespace = "urn:Manager")
        String hostname,
        @WebParam(name = "hostDetailLevel", targetNamespace = "urn:Manager")
        EnumHostDetailLevel hostDetailLevel,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostDetailLevel
     * @param sID
     * @param externalFilter
     * @return
     *     returns java.util.List<local.charles.module.ws.HostDetailTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostDetailRetrieveByExternalReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostDetailRetrieveByExternal", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByExternal")
    @ResponseWrapper(localName = "hostDetailRetrieveByExternalResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByExternalResponse")
    public List<HostDetailTransport> hostDetailRetrieveByExternal(
        @WebParam(name = "externalFilter", targetNamespace = "urn:Manager")
        ExternalFilterTransport externalFilter,
        @WebParam(name = "hostDetailLevel", targetNamespace = "urn:Manager")
        EnumHostDetailLevel hostDetailLevel,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param hostDetailLevel
     * @param sID
     * @param startsWithHostname
     * @return
     *     returns java.util.List<local.charles.module.ws.HostDetailTransport>
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostDetailRetrieveByNameStartsWithReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostDetailRetrieveByNameStartsWith", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByNameStartsWith")
    @ResponseWrapper(localName = "hostDetailRetrieveByNameStartsWithResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostDetailRetrieveByNameStartsWithResponse")
    public List<HostDetailTransport> hostDetailRetrieveByNameStartsWith(
        @WebParam(name = "startsWithHostname", targetNamespace = "urn:Manager")
        String startsWithHostname,
        @WebParam(name = "hostDetailLevel", targetNamespace = "urn:Manager")
        EnumHostDetailLevel hostDetailLevel,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param timeFilter
     * @param hostFilter
     * @param sID
     * @param eventIdFilter
     * @return
     *     returns local.charles.module.ws.WebReputationEventListTransport
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "webReputationEventRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "webReputationEventRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.WebReputationEventRetrieve")
    @ResponseWrapper(localName = "webReputationEventRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.WebReputationEventRetrieveResponse")
    public WebReputationEventListTransport webReputationEventRetrieve(
        @WebParam(name = "timeFilter", targetNamespace = "urn:Manager")
        TimeFilterTransport timeFilter,
        @WebParam(name = "hostFilter", targetNamespace = "urn:Manager")
        HostFilterTransport hostFilter,
        @WebParam(name = "eventIdFilter", targetNamespace = "urn:Manager")
        IDFilterTransport eventIdFilter,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param hostIDs
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostRecommendationsClear", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationsClear")
    @ResponseWrapper(localName = "hostRecommendationsClearResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationsClearResponse")
    public void hostRecommendationsClear(
        @WebParam(name = "hostIDs", targetNamespace = "urn:Manager")
        List<Integer> hostIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @param ruleIDs
     * @param hostID
     * @param type
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "hostRecommendationsResolve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationsResolve")
    @ResponseWrapper(localName = "hostRecommendationsResolveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationsResolveResponse")
    public void hostRecommendationsResolve(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "ruleIDs", targetNamespace = "urn:Manager")
        List<Integer> ruleIDs,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<java.lang.Integer>
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRecommendationUnresolvedRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRecommendationUnresolvedRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationUnresolvedRetrieve")
    @ResponseWrapper(localName = "hostRecommendationUnresolvedRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationUnresolvedRetrieveResponse")
    public List<Integer> hostRecommendationUnresolvedRetrieve(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param onlyunassigned
     * @param sID
     * @param hostID
     * @param type
     * @return
     *     returns java.util.List<java.lang.Integer>
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "hostRecommendationRuleIDsRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "hostRecommendationRuleIDsRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationRuleIDsRetrieve")
    @ResponseWrapper(localName = "hostRecommendationRuleIDsRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.HostRecommendationRuleIDsRetrieveResponse")
    public List<Integer> hostRecommendationRuleIDsRetrieve(
        @WebParam(name = "hostID", targetNamespace = "urn:Manager")
        int hostID,
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "onlyunassigned", targetNamespace = "urn:Manager")
        boolean onlyunassigned,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param sID
     * @param type
     * @param securityProfileID
     * @return
     *     returns java.util.List<java.lang.Integer>
     * @throws ManagerException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     */
    @WebMethod
    @WebResult(name = "securityProfileRecommendationRuleIDsRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "securityProfileRecommendationRuleIDsRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRecommendationRuleIDsRetrieve")
    @ResponseWrapper(localName = "securityProfileRecommendationRuleIDsRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.SecurityProfileRecommendationRuleIDsRetrieveResponse")
    public List<Integer> securityProfileRecommendationRuleIDsRetrieve(
        @WebParam(name = "securityProfileID", targetNamespace = "urn:Manager")
        int securityProfileID,
        @WebParam(name = "type", targetNamespace = "urn:Manager")
        int type,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sID
     * @throws ManagerException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "applicationTypeOverrideDelete", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideDelete")
    @ResponseWrapper(localName = "applicationTypeOverrideDeleteResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideDeleteResponse")
    public void applicationTypeOverrideDelete(
        @WebParam(name = "ids", targetNamespace = "urn:Manager")
        List<Integer> ids,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerTimeoutException_Exception
    ;

    /**
     * 
     * @param at
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplicationTypeOverrideTransport
     * @throws ManagerException_Exception
     * @throws ManagerIntegrityConstraintException_Exception
     * @throws ManagerValidationException_Exception
     * @throws ManagerAuthenticationException_Exception
     * @throws ManagerTimeoutException_Exception
     * @throws ManagerAuthorizationException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeOverrideSaveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeOverrideSave", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideSave")
    @ResponseWrapper(localName = "applicationTypeOverrideSaveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideSaveResponse")
    public ApplicationTypeOverrideTransport applicationTypeOverrideSave(
        @WebParam(name = "at", targetNamespace = "urn:Manager")
        ApplicationTypeOverrideTransport at,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerAuthenticationException_Exception, ManagerAuthorizationException_Exception, ManagerException_Exception, ManagerIntegrityConstraintException_Exception, ManagerTimeoutException_Exception, ManagerValidationException_Exception
    ;

    /**
     * 
     * @param id
     * @param sID
     * @return
     *     returns local.charles.module.ws.ApplicationTypeOverrideTransport
     * @throws ManagerException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeOverrideRetrieveReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeOverrideRetrieve", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideRetrieve")
    @ResponseWrapper(localName = "applicationTypeOverrideRetrieveResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideRetrieveResponse")
    public ApplicationTypeOverrideTransport applicationTypeOverrideRetrieve(
        @WebParam(name = "id", targetNamespace = "urn:Manager")
        int id,
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerException_Exception
    ;

    /**
     * 
     * @param sID
     * @return
     *     returns java.util.List<local.charles.module.ws.ApplicationTypeOverrideTransport>
     * @throws ManagerException_Exception
     */
    @WebMethod
    @WebResult(name = "applicationTypeOverrideRetrieveAllReturn", targetNamespace = "urn:Manager")
    @RequestWrapper(localName = "applicationTypeOverrideRetrieveAll", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideRetrieveAll")
    @ResponseWrapper(localName = "applicationTypeOverrideRetrieveAllResponse", targetNamespace = "urn:Manager", className = "local.charles.module.ws.ApplicationTypeOverrideRetrieveAllResponse")
    public List<ApplicationTypeOverrideTransport> applicationTypeOverrideRetrieveAll(
        @WebParam(name = "sID", targetNamespace = "urn:Manager")
        String sID)
        throws ManagerException_Exception
    ;

}
